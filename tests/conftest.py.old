import pytest
from app import create_app, db
from app.models.user import User
from werkzeug.security import generate_password_hash


@pytest.fixture
def app():
    """Crea una aplicación Flask para pruebas con una DB en memoria."""
    app = create_app()
    app.config.update({
        "TESTING": True,
        "SQLALCHEMY_DATABASE_URI": "sqlite:///:memory:",  
        "WTF_CSRF_ENABLED": False,   
        #"UPLOAD_FOLDER": "tests/uploads",  
    })

    with app.app_context():
        db.create_all()
        yield app
        db.session.remove()
        db.drop_all()


@pytest.fixture
def client(app):
    """Cliente de pruebas."""
    return app.test_client()


@pytest.fixture
def test_user(app):
    """Crea un usuario de prueba y asegura que está en una sesión activa."""
    with app.app_context():
        user = User(username="testuser",
                    email="test@example.com",
                    password=generate_password_hash("testpassword"))
        db.session.add(user)
        db.session.commit()
        return db.session.get(
            User, user.id)  # ✅ SOLUCIÓN para evitar DetachedInstanceError


@pytest.fixture
def authenticated_client(client, test_user):
    """Cliente autenticado con un usuario de prueba."""
    client.post("/auth/login",
                data={
                    "email": "test@example.com",
                    "password": "testpassword"
                },
                follow_redirects=True)
    return client


@pytest.fixture
def init_database(app):
    """Inicializa la base de datos con datos de prueba."""
    with app.app_context():
        db.create_all()

        # ✅ Crear usuario de prueba en la BD
        user = User(username="testuser",
                    email="test@example.com",
                    password=generate_password_hash("testpassword"))
        db.session.add(user)
        db.session.commit()
        db.session.refresh(user)  # ✅ Solución para DetachedInstanceError

        yield db  # Devuelve la sesión SQLAlchemy para usar en los tests

        db.session.remove()
        db.drop_all()


@pytest.fixture(scope="function", autouse=True)
def cleanup_db():
    """Elimina las sesiones de SQLAlchemy después de cada test para evitar transacciones activas."""
    yield
    db.session.remove()  # ✅ Limpieza segura después de cada test
